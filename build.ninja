cflags = -target aarch64-elf -ffreestanding -O2 -Wall -Wextra -Isrc -g -DAARCH64
ldflags = -T linker.ld -O2 -g

rule cc
  command = clang $cflags -c $in -o $out
  description = CC $out

rule ld
  command = ld.lld $ldflags -o $out $in
  description = LD $out

rule objcopy
  command = llvm-objcopy $in -O binary $out
  description = OBJCOPY $out

rule generate_compile_commands
  command = ninja -t compdb > compile_commands.json
  description = Generating compile_commands.json

build build/boot.o: cc src/boot.S
build build/main.o: cc src/main.c
build build/uart/uart.o: cc src/uart/uart.c
build build/mmio/mmio.o: cc src/mmio/mmio.c
build build/delay/delay.o: cc src/delay/delay.c
build build/utils/printk/printk.o: cc src/utils/printk/printk.c
build build/utils/el/el.o: cc src/utils/el/el.S

build kernel8.elf: ld build/boot.o build/main.o build/uart/uart.o build/mmio/mmio.o build/delay/delay.o build/utils/printk/printk.o
build kernel8.img: objcopy kernel8.elf

build compile_commands.json: generate_compile_commands

default kernel8.img compile_commands.json
